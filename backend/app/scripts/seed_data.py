import sys
import os

# Agrega la ra√≠z del proyecto al path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from backend.app import create_app
from backend.models import db, Rol, Tecnica, Recompensa
import json

app = create_app()

def insertar_datos_iniciales():
    with app.app_context():
        print("Insertando datos iniciales...")
        
        # Crear roles si no existen
        if not Rol.query.first():
            roles = [
                Rol(nombre='administrador'),
                Rol(nombre='usuario')
            ]
            for rol in roles:
                db.session.add(rol)
            print("‚úì Roles creados")
        
        # Crear t√©cnicas de estudio b√°sicas
        if not Tecnica.query.first():
            tecnicas = [
                Tecnica(nombre='Pomodoro', categoria='Gesti√≥n del tiempo', descripcion='T√©cnica de estudio por intervalos de 25 minutos', duracion_estimada=25),
                Tecnica(nombre='Timeboxing', categoria='Gesti√≥n del tiempo', descripcion='Asignaci√≥n estricta de tiempo a tareas', duracion_estimada=30),
                Tecnica(nombre='T√©cnica Feynman', categoria='Comprensi√≥n', descripcion='Aprender explicando con tus propias palabras', duracion_estimada=40),
                Tecnica(nombre='Mapas mentales', categoria='Organizaci√≥n', descripcion='Visualizar ideas y relaciones', duracion_estimada=20),
                Tecnica(nombre='Repetici√≥n espaciada', categoria='Memorizaci√≥n', descripcion='Revisar contenido en intervalos crecientes', duracion_estimada=15),
                Tecnica(nombre='M√©todo Cornell', categoria='Toma de notas', descripcion='T√©cnica estructurada para tomar apuntes', duracion_estimada=45),
                Tecnica(nombre='Lectura activa', categoria='Comprensi√≥n', descripcion='Leer con objetivos claros y preguntas', duracion_estimada=30),
                Tecnica(nombre='Flashcards', categoria='Memorizaci√≥n', descripcion='Uso de tarjetas de preguntas y respuestas', duracion_estimada=10)
            ]
            for tecnica in tecnicas:
                db.session.add(tecnica)
            print("‚úì T√©cnicas de estudio creadas")
        
        # Crear recompensas b√°sicas
        if not Recompensa.query.first():
            recompensas = [
                Recompensa(
                    nombre='Primera Sesi√≥n',
                    descripcion='Completa tu primera sesi√≥n de estudio',
                    tipo='puntos',
                    valor=10,
                    requisitos={'sesiones_completadas': 1}
                ),
                Recompensa(
                    nombre='Estudiante Dedicado',
                    descripcion='Completa 10 sesiones de estudio',
                    tipo='puntos',
                    valor=50,
                    requisitos={'sesiones_completadas': 10}
                ),
                Recompensa(
                    nombre='Maratonista Mental',
                    descripcion='Estudia por 5 horas en total',
                    tipo='puntos',
                    valor=100,
                    requisitos={'tiempo_total_minutos': 300}
                ),
                Recompensa(
                    nombre='Organizador Pro',
                    descripcion='Completa 20 tareas',
                    tipo='puntos',
                    valor=75,
                    requisitos={'tareas_completadas': 20}
                ),
                Recompensa(
                    nombre='Constancia',
                    descripcion='Estudia 7 d√≠as consecutivos',
                    tipo='puntos',
                    valor=150,
                    requisitos={'dias_consecutivos': 7}
                )
            ]
            for recompensa in recompensas:
                db.session.add(recompensa)
            print("‚úì Recompensas b√°sicas creadas")
        
        db.session.commit()
        print("üéâ Datos iniciales insertados correctamente!")

if __name__ == '__main__':
    insertar_datos_iniciales()